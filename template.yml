AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: AWS Fargate with VPC and ALB

Parameters:
  ImageName:
    Description: Name of the image. The service name
    Type: String
  ImageTag:
    Description: Tag of the image. The version of the service
    Type: String

Resources:
  VPC:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./template-vpc.yml

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-hello-world
      CapacityProviders:
        - FARGATE

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-hello-world
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      EnableExecuteCommand: true
      HealthCheckGracePeriodSeconds: 5
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !GetAtt VPC.Outputs.PublicSubnet1
            - !GetAtt VPC.Outputs.PublicSubnet2
            - !GetAtt VPC.Outputs.PrivateSubnet1
            - !GetAtt VPC.Outputs.PrivateSubnet2
          SecurityGroups:
            - !GetAtt VPC.Outputs.SG
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${AWS::StackName}-hello-world
          ContainerPort: 3000
          TargetGroupArn: !GetAtt VPC.Outputs.LB

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-hello-world
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !Ref ECSTaskRole
      RuntimePlatform:
        CpuArchitecture: ARM64
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-hello-world
          Cpu: 256
          Memory: 512
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}:${ImageTag}"
          HealthCheck:
            Command:
              - CMD-SHELL
              - node dist/scripts/healthcheck.js
            Interval: 10
            Timeout: 5
            Retries: 3
            StartPeriod: 5
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: VALKEY_URI
              Value: !Sub "valkey://${MemoryDBCluster.ClusterEndpoint.Address}:6379"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: containerlog

  ECSScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ServiceNamespace: ecs
      ScalableDimension: "ecs:service:DesiredCount"
      ResourceId: !Sub "service/${Cluster}/${Service}"

  ServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking-cpu70
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ServiceScalingPolicyMem:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking-mem70
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/fargate/${AWS::StackName}-hello-world

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-hello-world-ecs-task-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-hello-world-ecs-task-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Path: /

  MemoryDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MemoryDB security group
      VpcId: !GetAtt VPC.Outputs.VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0

  MemoryDBSubnetGroup:
    Type: AWS::MemoryDB::SubnetGroup
    Properties:
      Description: MemoryDB subnet group
      SubnetGroupName: !Sub ${AWS::StackName}-memory-db-subnet-group
      SubnetIds:
        - !GetAtt VPC.Outputs.PrivateSubnet1
        - !GetAtt VPC.Outputs.PrivateSubnet2

  MemoryDBCluster:
    Type: AWS::MemoryDB::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-valkey
      Description: Valkey cluster
      Engine: Valkey
      EngineVersion: 7.2
      ACLName: open-access
      NodeType: db.t4g.small
      NumReplicasPerShard: 1
      NumShards: 1
      SecurityGroupIds:
        - !GetAtt MemoryDBSecurityGroup.GroupId
      SubnetGroupName: !Ref MemoryDBSubnetGroup
      TLSEnabled: true

Outputs:
  ClusterName:
    Description: Amazon ECS Cluster Name
    Value: !Ref Cluster
  ServiceName:
    Description: Amazon ECS Service Name
    Value: !GetAtt Service.Name
  FQDN:
    Description: URL for your application
    Value: !GetAtt VPC.Outputs.PublicLBFQDN
  ValkeyURI:
    Description: URI for Valkey
    Value: !Sub "valkey://${MemoryDBCluster.ClusterEndpoint.Address}:6379"
